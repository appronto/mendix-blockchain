// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jsonwebtoken.actions;

import java.util.Date;
import java.util.List;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTCreator.Builder;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import jsonwebtoken.helper.AlgorithmHelper;
import jsonwebtoken.proxies.Claim;

public class JA_GenerateToken extends CustomJavaAction<java.lang.String>
{
	private java.lang.String secret;
	private IMendixObject __tokenObject;
	private jsonwebtoken.proxies.Token tokenObject;
	private jsonwebtoken.proxies.Enum_Algorithm algorithm;

	public JA_GenerateToken(IContext context, java.lang.String secret, IMendixObject tokenObject, java.lang.String algorithm)
	{
		super(context);
		this.secret = secret;
		this.__tokenObject = tokenObject;
		this.algorithm = algorithm == null ? null : jsonwebtoken.proxies.Enum_Algorithm.valueOf(algorithm);
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		this.tokenObject = __tokenObject == null ? null : jsonwebtoken.proxies.Token.initialize(getContext(), __tokenObject);

		// BEGIN USER CODE
		String logNode = jsonwebtoken.proxies.constants.Constants.getLogNode();
		String result = null;
		
		// Check if token object has been provided
		if (this.tokenObject == null) {
			Core.getLogger(logNode).warn("No valid token object has been provided");
			return result;
		}
		
		// Check if algorithm has been provided
		if (this.algorithm == null) {
			Core.getLogger(logNode).warn("No valid algorithm has been provided");
			return result;
		}
		
		// Get subject
		String subject = this.tokenObject.getSubject();
		
		// Get expiration date
		Date expiresAt = this.tokenObject.getExpiresAt();
		
		try {
			// Create new token using token builder
		    Builder tokenBuilder = JWT.create();
		    
		    // Optionally add subject
		    if (subject != null) tokenBuilder.withSubject(subject);
		    
		    // Optionally add expiration date
		    if (expiresAt != null) tokenBuilder.withExpiresAt(expiresAt);
		    
		    // Add claims
		    List<IMendixObject> claimList = Core.retrieveByPath(getContext(), this.__tokenObject, "JSONWebToken.Claim_Token");
		    for (IMendixObject iteratorClaim : claimList) {
				Claim claim = Claim.initialize(getContext(), iteratorClaim);
				tokenBuilder.withClaim(claim.getName(), claim.getValue());
			}
		    
		    // Sign and store token
		    result = tokenBuilder.sign(AlgorithmHelper.Algorithm(this.algorithm, this.secret));
		} catch (JWTCreationException exception){
		    // Invalid signing configuration / couldn't convert claims
			Core.getLogger(logNode).warn("Could not create token; invalid signing configuration or claims");
		}
		
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "JA_GenerateToken";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}

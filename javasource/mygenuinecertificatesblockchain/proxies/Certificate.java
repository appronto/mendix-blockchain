// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mygenuinecertificatesblockchain.proxies;

public class Certificate extends mendixblockchain.proxies.Transaction
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "MyGenuineCertificatesBlockchain.Certificate";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		CertificateNumber("CertificateNumber"),
		YearOfCreation("YearOfCreation"),
		PlaceOfProduction("PlaceOfProduction"),
		Product("Product"),
		TxId("TxId"),
		Signature("Signature"),
		Data("Data"),
		PublicKey("PublicKey"),
		IsValid("IsValid"),
		Transaction_Block("MendixBlockchain.Transaction_Block");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Certificate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "MyGenuineCertificatesBlockchain.Certificate"));
	}

	protected Certificate(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject certificateMendixObject)
	{
		super(context, certificateMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("MyGenuineCertificatesBlockchain.Certificate", certificateMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a MyGenuineCertificatesBlockchain.Certificate");
	}

	/**
	 * @deprecated Use 'Certificate.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static mygenuinecertificatesblockchain.proxies.Certificate initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return mygenuinecertificatesblockchain.proxies.Certificate.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static mygenuinecertificatesblockchain.proxies.Certificate initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new mygenuinecertificatesblockchain.proxies.Certificate(context, mendixObject);
	}

	public static mygenuinecertificatesblockchain.proxies.Certificate load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return mygenuinecertificatesblockchain.proxies.Certificate.initialize(context, mendixObject);
	}

	public static java.util.List<mygenuinecertificatesblockchain.proxies.Certificate> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<mygenuinecertificatesblockchain.proxies.Certificate> result = new java.util.ArrayList<mygenuinecertificatesblockchain.proxies.Certificate>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//MyGenuineCertificatesBlockchain.Certificate" + xpathConstraint))
			result.add(mygenuinecertificatesblockchain.proxies.Certificate.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of CertificateNumber
	 */
	public final java.lang.String getCertificateNumber()
	{
		return getCertificateNumber(getContext());
	}

	/**
	 * @param context
	 * @return value of CertificateNumber
	 */
	public final java.lang.String getCertificateNumber(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.CertificateNumber.toString());
	}

	/**
	 * Set value of CertificateNumber
	 * @param certificatenumber
	 */
	public final void setCertificateNumber(java.lang.String certificatenumber)
	{
		setCertificateNumber(getContext(), certificatenumber);
	}

	/**
	 * Set value of CertificateNumber
	 * @param context
	 * @param certificatenumber
	 */
	public final void setCertificateNumber(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String certificatenumber)
	{
		getMendixObject().setValue(context, MemberNames.CertificateNumber.toString(), certificatenumber);
	}

	/**
	 * @return value of YearOfCreation
	 */
	public final java.lang.Integer getYearOfCreation()
	{
		return getYearOfCreation(getContext());
	}

	/**
	 * @param context
	 * @return value of YearOfCreation
	 */
	public final java.lang.Integer getYearOfCreation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.YearOfCreation.toString());
	}

	/**
	 * Set value of YearOfCreation
	 * @param yearofcreation
	 */
	public final void setYearOfCreation(java.lang.Integer yearofcreation)
	{
		setYearOfCreation(getContext(), yearofcreation);
	}

	/**
	 * Set value of YearOfCreation
	 * @param context
	 * @param yearofcreation
	 */
	public final void setYearOfCreation(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer yearofcreation)
	{
		getMendixObject().setValue(context, MemberNames.YearOfCreation.toString(), yearofcreation);
	}

	/**
	 * @return value of PlaceOfProduction
	 */
	public final java.lang.String getPlaceOfProduction()
	{
		return getPlaceOfProduction(getContext());
	}

	/**
	 * @param context
	 * @return value of PlaceOfProduction
	 */
	public final java.lang.String getPlaceOfProduction(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.PlaceOfProduction.toString());
	}

	/**
	 * Set value of PlaceOfProduction
	 * @param placeofproduction
	 */
	public final void setPlaceOfProduction(java.lang.String placeofproduction)
	{
		setPlaceOfProduction(getContext(), placeofproduction);
	}

	/**
	 * Set value of PlaceOfProduction
	 * @param context
	 * @param placeofproduction
	 */
	public final void setPlaceOfProduction(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String placeofproduction)
	{
		getMendixObject().setValue(context, MemberNames.PlaceOfProduction.toString(), placeofproduction);
	}

	/**
	 * @return value of Product
	 */
	public final java.lang.String getProduct()
	{
		return getProduct(getContext());
	}

	/**
	 * @param context
	 * @return value of Product
	 */
	public final java.lang.String getProduct(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Product.toString());
	}

	/**
	 * Set value of Product
	 * @param product
	 */
	public final void setProduct(java.lang.String product)
	{
		setProduct(getContext(), product);
	}

	/**
	 * Set value of Product
	 * @param context
	 * @param product
	 */
	public final void setProduct(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String product)
	{
		getMendixObject().setValue(context, MemberNames.Product.toString(), product);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final mygenuinecertificatesblockchain.proxies.Certificate that = (mygenuinecertificatesblockchain.proxies.Certificate) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "MyGenuineCertificatesBlockchain.Certificate";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}

// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mendixblockchain.actions;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class CreateSignature extends CustomJavaAction<java.lang.String>
{
	private java.lang.String PPK;
	private java.lang.String ToSign;
	private java.lang.String PublicKey;

	public CreateSignature(IContext context, java.lang.String PPK, java.lang.String ToSign, java.lang.String PublicKey)
	{
		super(context);
		this.PPK = PPK;
		this.ToSign = ToSign;
		this.PublicKey = PublicKey;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		byte[] privateKeyBytes = new BASE64Decoder().decodeBuffer(this.PPK);
		KeyFactory kf = KeyFactory.getInstance("RSA"); // or "EC" or whatever
		PrivateKey privateKey = kf.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes));
		
		 byte[] data = this.ToSign.getBytes("UTF8");
		
	        Signature sig = Signature.getInstance("SHA1WithRSA");
	        sig.initSign(privateKey);
	        sig.update(data);
	        byte[] signatureBytes = sig.sign();
	        
	        return new BASE64Encoder().encode(signatureBytes);
	       
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "CreateSignature";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}

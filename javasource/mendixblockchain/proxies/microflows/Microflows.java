// This file was generated by Mendix Modeler 7.10.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mendixblockchain.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the MendixBlockchain module
	public static void aCr_CreateTxId(IContext context, mendixblockchain.proxies.Transaction _transaction)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Transaction", _transaction == null ? null : _transaction.getMendixObject());
			Core.execute(context, "MendixBlockchain.ACr_CreateTxId", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_BlockCreate(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "MendixBlockchain.AT_BlockCreate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_CheckProof(IContext context, mendixblockchain.proxies.Proof _proof)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Proof", _proof == null ? null : _proof.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_CheckProof", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_Decode(IContext context, mendixblockchain.proxies.UserKeyPair _userKeyPair)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UserKeyPair", _userKeyPair == null ? null : _userKeyPair.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_Decode", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_DeleteBlock(IContext context, mendixblockchain.proxies.Block _block)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Block", _block == null ? null : _block.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_DeleteBlock", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String aT_EncryptKey(IContext context, mendixblockchain.proxies.UserKeyPair _userKeyPair)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UserKeyPair", _userKeyPair == null ? null : _userKeyPair.getMendixObject());
			return (java.lang.String)Core.execute(context, "MendixBlockchain.AT_EncryptKey", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_GenerateKeypair(IContext context, mendixblockchain.proxies.UserKeyPair _userKeyPair)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UserKeyPair", _userKeyPair == null ? null : _userKeyPair.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_GenerateKeypair", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_ProofOwnership(IContext context, mendixblockchain.proxies.Transaction _transaction)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Transaction", _transaction == null ? null : _transaction.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_ProofOwnership", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean aT_RedirectHome(IContext context, system.proxies.User _user)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("User", _user == null ? null : _user.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "MendixBlockchain.AT_RedirectHome", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aT_SaveKeysForSession(IContext context, mendixblockchain.proxies.UserKeyPair _userKeyPair)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UserKeyPair", _userKeyPair == null ? null : _userKeyPair.getMendixObject());
			Core.execute(context, "MendixBlockchain.AT_SaveKeysForSession", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean aT_SetKeyPair(IContext context, mendixblockchain.proxies.UserKeyPair _userKeyPair)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("UserKeyPair", _userKeyPair == null ? null : _userKeyPair.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "MendixBlockchain.AT_SetKeyPair", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static system.proxies.User dS_CurrentUser(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "MendixBlockchain.DS_CurrentUser", params);
			return result == null ? null : system.proxies.User.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static mendixblockchain.proxies.UserKeyPair dS_GetKeyPair(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "MendixBlockchain.DS_GetKeyPair", params);
			return result == null ? null : mendixblockchain.proxies.UserKeyPair.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_Transaction_Validate(IContext context, mendixblockchain.proxies.Transaction _transaction)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Transaction", _transaction == null ? null : _transaction.getMendixObject());
			Core.execute(context, "MendixBlockchain.OCh_Transaction_Validate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCh_ValidateBlock(IContext context, mendixblockchain.proxies.Block _block)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Block", _block == null ? null : _block.getMendixObject());
			Core.execute(context, "MendixBlockchain.OCh_ValidateBlock", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sF_Block_Validate(IContext context, mendixblockchain.proxies.Block _block)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Block", _block == null ? null : _block.getMendixObject());
			Core.execute(context, "MendixBlockchain.SF_Block_Validate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sF_BlockCreate(IContext context, java.util.List<mendixblockchain.proxies.Transaction> _transactionList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_transactionList = null;
			if (_transactionList != null)
			{
				listparam_transactionList = new java.util.ArrayList<IMendixObject>();
				for (mendixblockchain.proxies.Transaction obj : _transactionList)
					listparam_transactionList.add(obj.getMendixObject());
			}
			params.put("TransactionList", listparam_transactionList);
			Core.execute(context, "MendixBlockchain.SF_BlockCreate", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String sF_GetBlockData(IContext context, java.util.List<mendixblockchain.proxies.Transaction> _transactionList, mendixblockchain.proxies.Block _newBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_transactionList = null;
			if (_transactionList != null)
			{
				listparam_transactionList = new java.util.ArrayList<IMendixObject>();
				for (mendixblockchain.proxies.Transaction obj : _transactionList)
					listparam_transactionList.add(obj.getMendixObject());
			}
			params.put("TransactionList", listparam_transactionList);
			params.put("NewBlock", _newBlock == null ? null : _newBlock.getMendixObject());
			return (java.lang.String)Core.execute(context, "MendixBlockchain.SF_GetBlockData", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static mendixblockchain.proxies.UserKeyPair sF_GetKeyPairFromSession(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "MendixBlockchain.SF_GetKeyPairFromSession", params);
			return result == null ? null : mendixblockchain.proxies.UserKeyPair.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sF_UpdateNonce(IContext context, java.util.List<mendixblockchain.proxies.Transaction> _transactionList, mendixblockchain.proxies.Block _newBlock)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_transactionList = null;
			if (_transactionList != null)
			{
				listparam_transactionList = new java.util.ArrayList<IMendixObject>();
				for (mendixblockchain.proxies.Transaction obj : _transactionList)
					listparam_transactionList.add(obj.getMendixObject());
			}
			params.put("TransactionList", listparam_transactionList);
			params.put("NewBlock", _newBlock == null ? null : _newBlock.getMendixObject());
			Core.execute(context, "MendixBlockchain.SF_UpdateNonce", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}
// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mendixblockchain.proxies;

public class UserKeyPair
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject userKeyPairMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "MendixBlockchain.UserKeyPair";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		PrivateKey("PrivateKey"),
		PublicKey("PublicKey"),
		HasKeys("HasKeys"),
		Secret("Secret"),
		JWT("JWT"),
		UserKeyPair_Session("MendixBlockchain.UserKeyPair_Session");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public UserKeyPair(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "MendixBlockchain.UserKeyPair"));
	}

	protected UserKeyPair(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject userKeyPairMendixObject)
	{
		if (userKeyPairMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("MendixBlockchain.UserKeyPair", userKeyPairMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a MendixBlockchain.UserKeyPair");

		this.userKeyPairMendixObject = userKeyPairMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'UserKeyPair.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static mendixblockchain.proxies.UserKeyPair initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return mendixblockchain.proxies.UserKeyPair.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static mendixblockchain.proxies.UserKeyPair initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new mendixblockchain.proxies.UserKeyPair(context, mendixObject);
	}

	public static mendixblockchain.proxies.UserKeyPair load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return mendixblockchain.proxies.UserKeyPair.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of PrivateKey
	 */
	public final java.lang.String getPrivateKey()
	{
		return getPrivateKey(getContext());
	}

	/**
	 * @param context
	 * @return value of PrivateKey
	 */
	public final java.lang.String getPrivateKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.PrivateKey.toString());
	}

	/**
	 * Set value of PrivateKey
	 * @param privatekey
	 */
	public final void setPrivateKey(java.lang.String privatekey)
	{
		setPrivateKey(getContext(), privatekey);
	}

	/**
	 * Set value of PrivateKey
	 * @param context
	 * @param privatekey
	 */
	public final void setPrivateKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String privatekey)
	{
		getMendixObject().setValue(context, MemberNames.PrivateKey.toString(), privatekey);
	}

	/**
	 * @return value of PublicKey
	 */
	public final java.lang.String getPublicKey()
	{
		return getPublicKey(getContext());
	}

	/**
	 * @param context
	 * @return value of PublicKey
	 */
	public final java.lang.String getPublicKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.PublicKey.toString());
	}

	/**
	 * Set value of PublicKey
	 * @param publickey
	 */
	public final void setPublicKey(java.lang.String publickey)
	{
		setPublicKey(getContext(), publickey);
	}

	/**
	 * Set value of PublicKey
	 * @param context
	 * @param publickey
	 */
	public final void setPublicKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String publickey)
	{
		getMendixObject().setValue(context, MemberNames.PublicKey.toString(), publickey);
	}

	/**
	 * @return value of HasKeys
	 */
	public final java.lang.Boolean getHasKeys()
	{
		return getHasKeys(getContext());
	}

	/**
	 * @param context
	 * @return value of HasKeys
	 */
	public final java.lang.Boolean getHasKeys(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.HasKeys.toString());
	}

	/**
	 * Set value of HasKeys
	 * @param haskeys
	 */
	public final void setHasKeys(java.lang.Boolean haskeys)
	{
		setHasKeys(getContext(), haskeys);
	}

	/**
	 * Set value of HasKeys
	 * @param context
	 * @param haskeys
	 */
	public final void setHasKeys(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean haskeys)
	{
		getMendixObject().setValue(context, MemberNames.HasKeys.toString(), haskeys);
	}

	/**
	 * @return value of Secret
	 */
	public final java.lang.String getSecret()
	{
		return getSecret(getContext());
	}

	/**
	 * @param context
	 * @return value of Secret
	 */
	public final java.lang.String getSecret(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Secret.toString());
	}

	/**
	 * Set value of Secret
	 * @param secret
	 */
	public final void setSecret(java.lang.String secret)
	{
		setSecret(getContext(), secret);
	}

	/**
	 * Set value of Secret
	 * @param context
	 * @param secret
	 */
	public final void setSecret(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String secret)
	{
		getMendixObject().setValue(context, MemberNames.Secret.toString(), secret);
	}

	/**
	 * @return value of JWT
	 */
	public final java.lang.String getJWT()
	{
		return getJWT(getContext());
	}

	/**
	 * @param context
	 * @return value of JWT
	 */
	public final java.lang.String getJWT(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.JWT.toString());
	}

	/**
	 * Set value of JWT
	 * @param jwt
	 */
	public final void setJWT(java.lang.String jwt)
	{
		setJWT(getContext(), jwt);
	}

	/**
	 * Set value of JWT
	 * @param context
	 * @param jwt
	 */
	public final void setJWT(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String jwt)
	{
		getMendixObject().setValue(context, MemberNames.JWT.toString(), jwt);
	}

	/**
	 * @return value of UserKeyPair_Session
	 */
	public final system.proxies.Session getUserKeyPair_Session() throws com.mendix.core.CoreException
	{
		return getUserKeyPair_Session(getContext());
	}

	/**
	 * @param context
	 * @return value of UserKeyPair_Session
	 */
	public final system.proxies.Session getUserKeyPair_Session(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		system.proxies.Session result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.UserKeyPair_Session.toString());
		if (identifier != null)
			result = system.proxies.Session.load(context, identifier);
		return result;
	}

	/**
	 * Set value of UserKeyPair_Session
	 * @param userkeypair_session
	 */
	public final void setUserKeyPair_Session(system.proxies.Session userkeypair_session)
	{
		setUserKeyPair_Session(getContext(), userkeypair_session);
	}

	/**
	 * Set value of UserKeyPair_Session
	 * @param context
	 * @param userkeypair_session
	 */
	public final void setUserKeyPair_Session(com.mendix.systemwideinterfaces.core.IContext context, system.proxies.Session userkeypair_session)
	{
		if (userkeypair_session == null)
			getMendixObject().setValue(context, MemberNames.UserKeyPair_Session.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.UserKeyPair_Session.toString(), userkeypair_session.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return userKeyPairMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final mendixblockchain.proxies.UserKeyPair that = (mendixblockchain.proxies.UserKeyPair) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "MendixBlockchain.UserKeyPair";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
